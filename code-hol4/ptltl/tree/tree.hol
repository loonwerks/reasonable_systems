load "stringLib";

open pairTheory listTheory ;

val _ =
 Hol_datatype
  `formula
     = Id of string
     | Prim of bool
     | Imp of formula => formula
     | Equiv of formula => formula
     | Or of formula => formula
     | Xor of formula => formula
     | And of formula => formula
     | Since of formula => formula
     | Histor of formula
     | Once of formula
     | Prev of formula
     | Start of formula
     | End of formula
     | Not of formula`
;

Definition other_elm_def :
 other_elm = K F
End

Definition empty_state_def :
 empty_state = K F
End

(*---------------------------------------------------------------------------*)
(* Following definition currently fails. Termination proof derailed by Start *)
(* and End cases, which make recursive calls on (Prev f), which is not, in   *)
(* this simplistic setting, necessarily smaller. Next thing to do is in-line *)
(* expand the one-step indirection of the recursive calls for those cases,   *)
(* which ought to clarify things for the termination condition generator.    *)
(*---------------------------------------------------------------------------*)

Definition verify_def :
 verify trace form <=>
   let (elm,trace_prev) =
         (if NULL trace then (other_elm,[])
          else (HD trace, TL trace))
   in
    case form
    of Id str      => elm str
     | Prim b      => b
     | Imp f1 f2   => (verify trace f1 ==> verify trace f2)
     | Equiv f1 f2 => (verify trace f1 <=> verify trace f2)
     | Or f1 f2    => (verify trace f1 \/ verify trace f2)
     | Xor f1 f2   => (verify trace f1 <> verify trace f2)
     | And f1 f2   => (verify trace f1 /\ verify trace f2)
     | Since f1 f2 => (verify trace f2 \/
                       (~NULL trace_prev /\ verify trace f1 /\
                        verify trace_prev (Since f1 f2)))
     | Histor f    => (verify trace f /\
                       (NULL trace_prev \/ verify trace_prev (Histor f)))
     | Once f      => (verify trace f \/
                       (~NULL trace_prev /\ verify trace_prev (Once f)))
     | Prev f      => ((NULL trace_prev /\ verify trace f) \/ verify trace_prev f)
     | Start f     => verify trace f /\ ~verify trace (Prev f)
     | End f       => verify trace (Prev f) /\ ~verify trace f
     | Not f       => ~verify trace f
Termination
WF_REL_TAC `inv_image ($< LEX $<) (\(x,y). (formula_size y, LENGTH x))`
 >> rw_tac list_ss [NULL_EQ,other_elm_def,combinTheory.K_DEF]
 >-
End
